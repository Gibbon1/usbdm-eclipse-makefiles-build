      <!-- Cortex-M4 
         MK
       -->      
      <!-- GNU Build options Cortex M4 (e.g. MK) devices -->
      <projectActionList id="gnuSettings.cortex.m4" root="usbdm_resource_path/Stationery/ARM/" >
         <createFolder  target="Sources"                        type="" />
         <createFolder  target="Startup_Code"                   type="" />
         <createFolder  target="Project_Headers"                type="include" />
         <createFolder  target="Project_Settings/Linker_Files"  type="" />
         <projectOption id="net.sourceforge.usbdm.cdt.arm.toolchain.mcpu"              > <value>net.sourceforge.usbdm.cdt.arm.toolchain.mcpu.cortexM4</value> </projectOption>
         <projectOption id="net.sourceforge.usbdm.cdt.arm.toolchain.mthumb"            > <value>true</value> </projectOption>
         <projectOption id="net.sourceforge.usbdm.cdt.arm.toolchain.buildtools"        > <value>$(buildToolId)</value> </projectOption>
         <projectOption id="net.sourceforge.usbdm.cdt.toolchain.c.linker.linkerFile"   > <value>$(linkerFile)</value> </projectOption>
         <projectOption id="net.sourceforge.usbdm.cdt.toolchain.cpp.linker.linkerFile" > <value>$(linkerFile)</value> </projectOption>
         <projectOption id="gnu.c.link.option.paths" >                                   <value>&quot;${ProjDirPath}/Project_Settings/Linker_Files&quot;</value> </projectOption>
         <projectOption id="gnu.cpp.link.option.paths" >                                 <value>&quot;${ProjDirPath}/Project_Settings/Linker_Files&quot;</value> </projectOption>
      </projectActionList>
      
      <!-- GNU Build options Cortex M4F (e.g. MKxxF) devices -->
      <projectActionList id="gnuSettings.cortex.m4f" root="usbdm_resource_path/Stationery/ARM/" >
         <projectActionListRef  ref="gnuSettings.cortex.m4" />
         <projectOption id="net.sourceforge.usbdm.cdt.arm.toolchain.mfloat-abi" > <value>net.sourceforge.usbdm.cdt.toolchain.processor.option.misc.mfloat.hard</value> </projectOption>
         <projectOption id="net.sourceforge.usbdm.cdt.arm.toolchain.mfpu"       > <value>net.sourceforge.usbdm.cdt.toolchain.processor.option.misc.mfpu.fpv4-sp-d16</value> </projectOption>
      </projectActionList>

      <!-- Freescale Kinetis SDK  -->
      <projectActionList id="KinetisM4-SDK" root="usbdm_resource_path/Stationery/ARM/" >
         <variable id="KinetisM4-SDK-enable"  name="Kinetis SDK"   description="Adds Kinetis SDK features" />
         <condition variable="KinetisM4-SDK-enable">
            <projectOption id="net.sourceforge.usbdm.gnu.c.compiler.option.include.paths" >
               <value>&quot;${KSDK_PATH}/platform/utilities&quot;</value>
               <value>&quot;${KSDK_PATH}/platform/drivers/clock&quot;</value>
               <value>&quot;${KSDK_PATH}/platform/drivers/gpio&quot;</value>
               <value>&quot;${KSDK_PATH}/platform/drivers/interrupt&quot;</value>
               <value>&quot;${KSDK_PATH}/platform/hal/sim&quot;</value>
               <value>&quot;${KSDK_PATH}/platform/hal/port&quot;</value>
               <value>&quot;${KSDK_PATH}/platform/hal/gpio&quot;</value>
               <value>&quot;${KSDK_PATH}/rtos&quot;</value>
            </projectOption>            
            <projectOption id="net.sourceforge.usbdm.gnu.cpp.compiler.option.include.paths" >
               <value>&quot;${KSDK_PATH}/platform/utilities&quot;</value>
               <value>&quot;${KSDK_PATH}/platform/drivers/clock&quot;</value>
               <value>&quot;${KSDK_PATH}/platform/drivers/gpio&quot;</value>
               <value>&quot;${KSDK_PATH}/platform/drivers/interrupt&quot;</value>
               <value>&quot;${KSDK_PATH}/platform/hal/sim&quot;</value>
               <value>&quot;${KSDK_PATH}/platform/hal/port&quot;</value>
               <value>&quot;${KSDK_PATH}/platform/hal/gpio&quot;</value>
               <value>&quot;${KSDK_PATH}/rtos&quot;</value>
            </projectOption>            
            <projectOption id="net.sourceforge.usbdm.gnu.cpp.compiler.option.preprocessor.def.symbols" >
               <value>__CORTEX_M3</value>
               <value>__CMSIS_RTOS</value>
            </projectOption>            
            <projectOption id="net.sourceforge.usbdm.gnu.c.compiler.option.preprocessor.def.symbols" >
               <value>__CORTEX_M3</value>
               <value>__CMSIS_RTOS</value>
            </projectOption>            
         </condition>
      </projectActionList>
            
      <!-- Cortex-M4 CMSIS RTOS -->
      <projectActionList id="Cortex-M4-CMSIS" root="usbdm_resource_path/Stationery/ARM/" >
         <variable id="CMSIS-M4-rtos"  name="CMSIS RTOS framework"   description="Adds CMSIS-RTOS framework" />
         <condition variable="CMSIS-M4-rtos">
            <createFolder                                           target="cmsis"      type="include" />
            <copy           source="cmsis/Doc/index.html"           target="CMSIS.html" type="link" />
            <copy           source="cmsis/INC"                      target="cmsis/INC" />
            <copy           source="cmsis/SRC"                      target="cmsis/SRC" />
            <copy           source="cmsis/GCC/SVC_Table.S"          target="cmsis/GCC/SVC_Table.S" />
            <copy           source="cmsis/GCC/HAL_CM4.S"            target="cmsis/GCC/HAL_CM4.S" />
            <copy           source="Sources/RTX_Conf_CM.c"          target="Sources/RTX_Conf_CM.c" />
            <copy           source="Sources/RTX_Main.c"             target="Sources/main.c" />
            <projectOption id="net.sourceforge.usbdm.gnu.c.compiler.option.include.paths" >
               <value>&quot;${ProjDirPath}/cmsis/INC&quot;</value>
               <value>&quot;${ProjDirPath}/cmsis/SRC&quot;</value>
            </projectOption>            
            <projectOption id="net.sourceforge.usbdm.gnu.cpp.compiler.option.include.paths" >
               <value>&quot;${ProjDirPath}/cmsis/INC&quot;</value>
               <value>&quot;${ProjDirPath}/cmsis/SRC&quot;</value>
            </projectOption>            
            <projectOption id="net.sourceforge.usbdm.gnu.cpp.compiler.option.preprocessor.def.symbols" >
               <value>__CORTEX_M4</value>
               <value>__CMSIS_RTOS</value>
            </projectOption>            
            <projectOption id="net.sourceforge.usbdm.gnu.c.compiler.option.preprocessor.def.symbols" >
               <value>__CORTEX_M4</value>
               <value>__CMSIS_RTOS</value>
            </projectOption>            
         </condition>
      </projectActionList>

      <!-- Cortex-M4F CMSIS RTOS -->
      <projectActionList id="Cortex-M4F-CMSIS" root="usbdm_resource_path/Stationery/ARM/" >
         <variable id="CMSIS-M4F-rtos"  name="CMSIS RTOS framework"   description="Adds CMSIS-RTOS framework" />
         <condition variable="CMSIS-M4F-rtos">
            <createFolder                                           target="cmsis"      type="include" />
            <copy           source="cmsis/Doc/index.html"           target="CMSIS.html" type="link" />
            <copy           source="cmsis/INC"                      target="cmsis/INC" />
            <copy           source="cmsis/SRC"                      target="cmsis/SRC" />
            <copy           source="cmsis/GCC/SVC_Table.S"          target="cmsis/GCC/SVC_Table.S" />
            <copy           source="cmsis/GCC/HAL_CM4.S"            target="cmsis/GCC/HAL_CM4.S" />
            <copy           source="Sources/RTX_Conf_CM.c"          target="Sources/RTX_Conf_CM.c" />
            <copy           source="Sources/RTX_Main.c"             target="Sources/main.c" />
            <projectOption id="net.sourceforge.usbdm.gnu.c.compiler.option.include.paths" >
               <value>&quot;${ProjDirPath}/cmsis/INC&quot;</value>
               <value>&quot;${ProjDirPath}/cmsis/SRC&quot;</value>
            </projectOption>            
            <projectOption id="net.sourceforge.usbdm.gnu.cpp.compiler.option.include.paths" >
               <value>&quot;${ProjDirPath}/cmsis/INC&quot;</value>
               <value>&quot;${ProjDirPath}/cmsis/SRC&quot;</value>
            </projectOption>            
            <projectOption id="net.sourceforge.usbdm.gnu.cpp.compiler.option.preprocessor.def.symbols" >
               <value>__CORTEX_M4F</value>
               <value>__CMSIS_RTOS</value>
               <value>__FPU_PRESENT</value>
            </projectOption>            
            <projectOption id="net.sourceforge.usbdm.gnu.c.compiler.option.preprocessor.def.symbols" >
               <value>__CORTEX_M4F</value>
               <value>__CMSIS_RTOS</value>
               <value>__FPU_PRESENT</value>
            </projectOption>            
         </condition>
      </projectActionList>

      <!-- Base MK files -->
      <projectActionList id="Kinetis-MK-files" root="usbdm_resource_path/Stationery/ARM/" >
         <copy source="$(externalVectorTable)"                               target="Startup_Code/vectors.c" />
         <copy source="$(externalLinkerScript)"                              target="Project_Settings/Linker_Files/Custom.ld" />
         <copy source="$(externalHeaderFile)"                                target="Project_Headers/$(targetDevice).h" />
         <copy source="Startup_Code/system-mk.c"                             target="Startup_Code/system.c" />
         <copy source="Startup_Code/vectors-mk.c"                            target="Startup_Code/vectors.c" />
         <copy source="Startup_Code/newlib_stubs.c"                          target="Startup_Code/newlib_stubs.c" />
         <copy source="Startup_Code/startup_ARMLtdGCC_CortexM4.S"            target="Startup_Code/startup_ARMLtdGCC.S" />
         <copy source="Project_Settings/Debug.launch"                        target="Project_Settings/$(projectName)-Debug.launch" />
         <copy source="Project_Settings/Linker_Files/ARMLtd_GCC-rom-mk.ld"   target="Project_Settings/Linker_Files/ARMLtd_GCC-rom.ld" />
         <copy source="Project_Settings/Linker_Files/MemoryMap.ld"           target="Project_Settings/Linker_Files/MemoryMap-$(targetDeviceName).ld" />
         <copy source="Project_Headers/derivative.h"                         target="Project_Headers/derivative.h" />
         <copy source="Project_Headers/TargetDevice.h"                       target="Project_Headers/$(targetDevice).h" />
         <copy source="Project_Headers/system.h"                             target="Project_Headers/system.h" />
         <copy source="Project_Headers/core_cm4.h"                           target="Project_Headers/core_cm4.h" />
         <copy source="Project_Headers/core_cm4_simd.h"                      target="Project_Headers/core_cm4_simd.h" />
         <copy source="Project_Headers/core_cmFunc.h"                        target="Project_Headers/core_cmFunc.h" />
         <copy source="Project_Headers/core_cmInstr.h"                       target="Project_Headers/core_cmInstr.h" />
         <copy source="Project_Headers/utilities-mk.h"                       target="Project_Headers/utilities.h" />
         <copy source="Project_Headers/leds.h"                               target="Project_Headers/leds.h" />
         <copy source="Project_Headers/Freedom.h"                            target="Project_Headers/Freedom.h" />
         <copy source="Sources/leds.c"                                       target="Sources/leds.c" />
         <copy source="Sources/main.c"                                       target="Sources/main.c" />
      </projectActionList>

      <!-- Base MK-F files -->
      <projectActionList id="Kinetis-MK-F-files" root="usbdm_resource_path/Stationery/ARM/" >
         <projectActionListRef  ref="Kinetis-MK-files" />
      </projectActionList>

      <projectActionList id="Kinetis-MK-ProjectActions" >
         <projectActionListRef  ref="gnuSettings.cortex.m4" />
         <projectActionListRef  ref="Cortex-M4-CMSIS" />
         <projectActionListRef  ref="Kinetis-MK-files" />
         <projectActionListRef  ref="Kinetis-PE" />
         <projectActionListRef  ref="KinetisM4-SDK" />
      </projectActionList>

      <projectActionList id="Kinetis-MK-F-ProjectActions" >
         <projectActionListRef  ref="gnuSettings.cortex.m4f" />
         <projectActionListRef  ref="Cortex-M4F-CMSIS" />
         <projectActionListRef  ref="Kinetis-MK-F-files" />
         <projectActionListRef  ref="Kinetis-PE" />
         <projectActionListRef  ref="KinetisM4-SDK" />
      </projectActionList>

      <!-- Extra Optional files for MKxxM5 -->
      <projectActionList id="Options-file-list-MKxxM5" root="usbdm_resource_path/Stationery/ARM/" >
         <variable id="Clock-setup-MKxxM5" name="Clock setup code"        description="Adds code for basic clock initialization - check assumptions made" />
         <variable id="UART-setup-MKxxM5"  name="UART setup code"         description="Adds C stdio (UART) support for newlib" />
         <condition variable="Clock-setup-MKxxM5" >
            <copy source="Startup_Code/clock-MKxx.c"                      target="Startup_Code/clock.c" />
            <copy source="Project_Headers/clock_configure-MKxxM5.h"       target="Project_Headers/clock_configure.h" />
         </condition>
         <condition variable="UART-setup-MKxxM5">
            <copy source="Startup_Code/uart-mk.c"                         target="Startup_Code/uart.c" />
            <copy source="Project_Headers/uart.h"                         target="Project_Headers/uart.h" />
         </condition>
      </projectActionList>

      <!-- Extra Optional files for MKxxM7 -->
      <projectActionList id="Options-file-list-MKxxM7" root="usbdm_resource_path/Stationery/ARM/" >
         <variable id="Clock-setup-MKxxM7" name="Clock setup code"        description="Adds code for basic clock initialization - check assumptions made" />
         <variable id="UART-setup-MKxxM7"  name="UART setup code"         description="Adds C stdio (UART) support for newlib" />
         <condition variable="Clock-setup-MKxxM7" >
            <copy source="Startup_Code/clock-MKxx.c"                      target="Startup_Code/clock.c" />
            <copy source="Project_Headers/clock_configure-MKxxM7.h"       target="Project_Headers/clock_configure.h" />
         </condition>
         <condition variable="UART-setup-MKxxM7">
            <copy source="Startup_Code/uart-mk.c"                         target="Startup_Code/uart.c" />
            <copy source="Project_Headers/uart.h"                         target="Project_Headers/uart.h" />
         </condition>
      </projectActionList>

      <!-- Extra Optional files for MKxxM10 -->
      <projectActionList id="Options-file-list-MKxxM10" root="usbdm_resource_path/Stationery/ARM/" >
         <variable id="Clock-setup-MKxxM10" name="Clock setup code"       description="Adds code for basic clock initialization - check assumptions made" />
         <variable id="UART-setup-MKxxM10"  name="UART setup code"        description="Adds C stdio (UART) support for newlib" />
         <condition variable="Clock-setup-MKxxM10" >
            <copy source="Startup_Code/clock-MKxx.c"                      target="Startup_Code/clock.c" />
            <copy source="Project_Headers/clock_configure-MKxxM10.h"      target="Project_Headers/clock_configure.h" />
         </condition>
         <condition variable="UART-setup-MKxxM10">
            <copy source="Startup_Code/uart-mk.c"                         target="Startup_Code/uart.c" />
            <copy source="Project_Headers/uart.h"                         target="Project_Headers/uart.h" />
         </condition>
      </projectActionList>

      <!-- Extra Optional files for MKxx10Z -->
      <projectActionList id="Options-file-list-MKxxM10Z" root="usbdm_resource_path/Stationery/ARM/" >
         <variable id="Clock-setup-MKxxM10Z" name="Clock setup code"      description="Adds code for basic clock initialization - check assumptions made" />
         <variable id="UART-setup-MKxxM10Z"  name="UART setup code"       description="Adds C stdio (UART) support for newlib" />
         <condition variable="Clock-setup-MKxxM10Z" >
            <copy source="Startup_Code/clock-MKxxZ.c"                     target="Startup_Code/clock.c" />
            <copy source="Project_Headers/clock_configure-MKxxM10Z.h"     target="Project_Headers/clock_configure.h" />
         </condition>
         <condition variable="UART-setup-MKxxM10Z">
            <copy source="Startup_Code/uart-mk.c"                         target="Startup_Code/uart.c" />
            <copy source="Project_Headers/uart.h"                         target="Project_Headers/uart.h" />
         </condition>
      </projectActionList>

      <!-- Extra Optional files for MKxxM12 -->
      <projectActionList id="Options-file-list-MKxxM12" root="usbdm_resource_path/Stationery/ARM/" >
         <variable id="Clock-setup-MKxxM12" name="Clock setup code"       description="Adds code for basic clock initialization - check assumptions made" />
         <variable id="UART-setup-MKxxM12"  name="UART setup code"        description="Adds C stdio (UART) support for newlib" />
         <condition variable="Clock-setup-MKxxM12" >
            <copy source="Startup_Code/clock-MKxx.c"                      target="Startup_Code/clock.c" />
            <copy source="Project_Headers/clock_configure-MKxxM12.h"      target="Project_Headers/clock_configure.h" />
         </condition>
         <condition variable="UART-setup-MKxxM12">
            <copy source="Startup_Code/uart-mk.c"                         target="Startup_Code/uart.c" />
            <copy source="Project_Headers/uart.h"                         target="Project_Headers/uart.h" />
         </condition>
      </projectActionList>

      <!-- Extra Optional files for MKxxM12/M15 with Dual PLLs -->
      <projectActionList id="Options-file-list-MKxxM12-DualPLL" root="usbdm_resource_path/Stationery/ARM/" >
         <variable id="Clock-setup-MKxxM12-DualPLL" name="Clock setup code"   description="Adds code for basic clock initialization - check assumptions made" />
         <variable id="UART-setup-MKxxM12-DualPLL"  name="UART setup code"    description="Adds C stdio (UART) support for newlib" />
         <condition variable="Clock-setup-MKxxM12-DualPLL" >
            <copy source="Startup_Code/clock-MKxxM12-DualPLL.c"               target="Startup_Code/clock.c" />
            <copy source="Project_Headers/clock_configure-MKxxM12-DualPLL.h"  target="Project_Headers/clock_configure.h" />
         </condition>
         <condition variable="UART-setup-MKxxM12-DualPLL">
            <copy source="Startup_Code/uart-mk.c"                             target="Startup_Code/uart.c" />
            <copy source="Project_Headers/uart.h"                             target="Project_Headers/uart.h" />
         </condition>
      </projectActionList>

      <!-- Extra Optional files for MKxxM12 with USB derived Clock (MK22FN(some), MK63FN, MK64FN, MK64FX)-->
      <projectActionList id="Options-file-list-MKxxM12_USBClk" root="usbdm_resource_path/Stationery/ARM/" >
         <variable id="Clock-setup-MK64M12" name="Clock setup code"       description="Adds code for basic clock initialization - check assumptions made" />
         <variable id="UART-setup-MK64M12"  name="UART setup code"        description="Adds C stdio (UART) support for newlib" />
         <condition variable="Clock-setup-MK64M12" >
            <copy source="Startup_Code/clock-MK64M12.c"                   target="Startup_Code/clock.c" />
            <copy source="Project_Headers/clock_configure-MK64M12.h"        target="Project_Headers/clock_configure.h" />
         </condition>
         <condition variable="UART-setup-MK64M12">
            <copy source="Startup_Code/uart-mk.c"                         target="Startup_Code/uart.c" />
            <copy source="Project_Headers/uart.h"                         target="Project_Headers/uart.h" />
         </condition>
      </projectActionList>
