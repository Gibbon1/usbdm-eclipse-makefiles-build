<!--
Devices using this peripheral: 
      MK10D5
      MK10D7
      MK10D10
      MK10DZ10
      MK10F12
      MK11D5
      MK12D5
      MK20D5
      MK20D7
      MK20D10
      MK20DZ10
      MK20F12
      MK21D5
      MK21F12
      MK22D5
      MK22F12
      MK22F51212
      MK24F12
      MK30D7
      MK30D10
      MK30DZ10
      MK40D7
      MK40D10
      MK40DZ10
      MK50D7
      MK50D10
      MK50DZ10
      MK51D7
      MK51D10
      MK51DZ10
      MK52D10
      MK52DZ10
      MK53D10
      MK53DZ10
      MK60D10
      MK60DZ10
      MK60F12
      MK60F15
      MK61F12
      MK61F15
      MK63F12
      MK64F12
      MK70F12
      MK70F15
      MKE02Z2
      MKE02Z4
      MKE04Z4
      MKE04Z8M4
      MKE06Z4
      MKV10Z7
      SKEAZ4
-->
      <peripheral>
         <?sourceFile "CRC" ?>
         <name>CRC</name>
         <description>Cyclic Redundancy Check</description>
         <prependToName>CRC</prependToName>
         <baseAddress>0x40032000</baseAddress>
         <size>32</size>
         <access>read-write</access>
         <resetValue>0x0</resetValue>
         <resetMask>0xFFFFFFFF</resetMask>
         <addressBlock>
            <offset>0x0</offset>
            <size>0x4</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <?width "16" ?>
            <offset>0x0</offset>
            <size>0x2</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <?width "8" ?>
            <offset>0x0</offset>
            <size>0x2</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <?width "16" ?>
            <offset>0x2</offset>
            <size>0x2</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <?width "8" ?>
            <offset>0x2</offset>
            <size>0x2</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <offset>0x4</offset>
            <size>0x4</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <?width "16" ?>
            <offset>0x4</offset>
            <size>0x2</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <?width "8" ?>
            <offset>0x4</offset>
            <size>0x2</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <?width "16" ?>
            <offset>0x6</offset>
            <size>0x2</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <?width "8" ?>
            <offset>0x6</offset>
            <size>0x2</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <offset>0x8</offset>
            <size>0x4</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <?width "8" ?>
            <offset>0xB</offset>
            <size>0x1</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>DATA</name>
               <description>Data register</description>
               <addressOffset>0x0</addressOffset>
               <resetValue>0xFFFFFFFF</resetValue>
               <fields>
                  <field>
                     <name>LL</name>
                     <description>Low Lower Byte</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>LU</name>
                     <description>Low Upper Byte</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>HL</name>
                     <description>High Lower Byte</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>HU</name>
                     <description>High Upper Byte</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>DATAL</name>
               <description>DATAL register</description>
               <addressOffset>0x0</addressOffset>
               <size>16</size>
               <resetValue>0xFFFF</resetValue>
               <resetMask>0xFFFF</resetMask>
               <fields>
                  <field>
                     <name>DATAL</name>
                     <description>DATAL stores the lower 16 bits of the 16/32 bit CRC</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <name>DATALL</name>
               <description>DATALL register</description>
               <addressOffset>0x0</addressOffset>
               <size>8</size>
               <resetValue>0xFF</resetValue>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>DATALL</name>
                     <description>CRCLL stores the first 8 bits of the 32 bit DATA</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <name>DATALU</name>
               <description>DATALU register</description>
               <addressOffset>0x1</addressOffset>
               <size>8</size>
               <resetValue>0xFF</resetValue>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>DATALU</name>
                     <description>DATALL stores the second 8 bits of the 32 bit CRC</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <name>DATAH</name>
               <description>DATAH register</description>
               <addressOffset>0x2</addressOffset>
               <size>16</size>
               <resetValue>0xFFFF</resetValue>
               <resetMask>0xFFFF</resetMask>
               <fields>
                  <field>
                     <name>DATAH</name>
                     <description>DATAH stores the high 16 bits of the 16/32 bit CRC</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <name>DATAHL</name>
               <description>DATAHL register</description>
               <addressOffset>0x2</addressOffset>
               <size>8</size>
               <resetValue>0xFF</resetValue>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>DATAHL</name>
                     <description>DATAHL stores the third 8 bits of the 32 bit CRC</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <name>DATAHU</name>
               <description>DATAHU register</description>
               <addressOffset>0x3</addressOffset>
               <size>8</size>
               <resetValue>0xFF</resetValue>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>DATAHU</name>
                     <description>DATAHU stores the fourth 8 bits of the 32 bit CRC</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <name>GPOLY</name>
               <description>Polynomial register</description>
               <addressOffset>0x4</addressOffset>
               <resetValue>0x1021</resetValue>
               <fields>
                  <field>
                     <name>LOW</name>
                     <description>Low Polynominal Half-word</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
                  <field>
                     <name>HIGH</name>
                     <description>High Polynominal Half-word</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>GPOLYL</name>
               <description>GPOLYL register</description>
               <addressOffset>0x4</addressOffset>
               <size>16</size>
               <resetValue>0xFFFF</resetValue>
               <resetMask>0xFFFF</resetMask>
               <fields>
                  <field>
                     <name>GPOLYL</name>
                     <description>POLYL stores the lower 16 bits of the 16/32 bit CRC polynomial value</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <name>GPOLYLL</name>
               <description>GPOLYLL register</description>
               <addressOffset>0x4</addressOffset>
               <size>8</size>
               <resetValue>0xFF</resetValue>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>GPOLYLL</name>
                     <description>POLYLL stores the first 8 bits of the 32 bit CRC</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <name>GPOLYLU</name>
               <description>GPOLYLU register</description>
               <addressOffset>0x5</addressOffset>
               <size>8</size>
               <resetValue>0xFF</resetValue>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>GPOLYLU</name>
                     <description>POLYLL stores the second 8 bits of the 32 bit CRC</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <name>GPOLYH</name>
               <description>GPOLYH register</description>
               <addressOffset>0x6</addressOffset>
               <size>16</size>
               <resetValue>0xFFFF</resetValue>
               <resetMask>0xFFFF</resetMask>
               <fields>
                  <field>
                     <name>GPOLYH</name>
                     <description>POLYH stores the high 16 bits of the 16/32 bit CRC polynomial value</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <name>GPOLYHL</name>
               <description>GPOLYHL register</description>
               <addressOffset>0x6</addressOffset>
               <size>8</size>
               <resetValue>0xFF</resetValue>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>GPOLYHL</name>
                     <description>POLYHL stores the third 8 bits of the 32 bit CRC</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <name>GPOLYHU</name>
               <description>GPOLYHU register</description>
               <addressOffset>0x7</addressOffset>
               <size>8</size>
               <resetValue>0xFF</resetValue>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>GPOLYHU</name>
                     <description>POLYHU stores the fourth 8 bits of the 32 bit CRC</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <name>CTRL</name>
               <description>Control register</description>
               <addressOffset>0x8</addressOffset>
               <fields>
                  <field>
                     <name>TCRC</name>
                     <description>Width of CRC protocol</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>16-bit CRC protocol</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>32-bit CRC protocol</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>WAS</name>
                     <description>Write CRC Data Register As Seed\n
When asserted, a value written to the CRC data register is considered a seed value.\n
When deasserted, a value written to the CRC data register is taken as data for CRC computation</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Writes to the CRC data register are data values</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Writes to the CRC data register are seed values</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>FXOR</name>
                     <description>Complement Read Of CRC Data Register\n
Some CRC protocols require the final checksum to be XORed with 0xFFFFFFFF or 0xFFFF.\n
Asserting this bit enables on the fly complementing of read data</description>
                     <bitOffset>26</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No XOR on reading</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Invert or complement the read value of the CRC Data register</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TOTR</name>
                     <description>Type Of Transpose For Read\n
Identify the transpose configuration of the value read from the CRC Data register.\n
See the description of the transpose feature for the available transpose options</description>
                     <bitOffset>28</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b00</name>
                           <description>No transposition</description>
                           <value>0b00</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01</name>
                           <description>Bits in bytes are transposed; bytes are not transposed</description>
                           <value>0b01</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10</name>
                           <description>Both bits in bytes and bytes are transposed</description>
                           <value>0b10</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11</name>
                           <description>Only bytes are transposed; no bits in a byte are transposed</description>
                           <value>0b11</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TOT</name>
                     <description>Type Of Transpose For Writes\n
Define the transpose configuration of the data written to the CRC data register. See the description of the
transpose feature for the available transpose options</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b00</name>
                           <description>No transposition</description>
                           <value>0b00</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01</name>
                           <description>Bits in bytes are transposed; bytes are not transposed</description>
                           <value>0b01</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10</name>
                           <description>Both bits in bytes and bytes are transposed</description>
                           <value>0b10</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11</name>
                           <description>Only bytes are transposed; no bits in a byte are transposed</description>
                           <value>0b11</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>CTRLHU</name>
               <description>Control register (byte access)</description>
               <addressOffset>0xB</addressOffset>
               <size>8</size>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>TCRC</name>
                     <description>Width of CRC protocol</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>16-bit CRC protocol</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>32-bit CRC protocol</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>WAS</name>
                     <description>Write CRC Data Register As Seed\n
When asserted, a value written to the CRC data register is considered a seed value.\n
When deasserted, a value written to the CRC data register is taken as data for CRC computation</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Writes to CRC data register are data values</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Writes to CRC data reguster are seed values</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>FXOR</name>
                     <description>Complement Read Of CRC Data Register\n
Some CRC protocols require the final checksum to be XORed with 0xFFFFFFFF or 0xFFFF.\n
Asserting this bit enables on the fly complementing of read data</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No XOR on reading</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Invert or complement the read value of CRC data register</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TOTR</name>
                     <description>Type Of Transpose For Read\n
Identify the transpose configuration of the value read from the CRC Data register.\n
See the description of the transpose feature for the available transpose options</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b00</name>
                           <description>No Transposition</description>
                           <value>0b00</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01</name>
                           <description>Bits in bytes are transposed, bytes are not transposed</description>
                           <value>0b01</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10</name>
                           <description>Both bits in bytes and bytes are transposed</description>
                           <value>0b10</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11</name>
                           <description>Only bytes are transposed; no bits in a byte are transposed</description>
                           <value>0b11</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TOT</name>
                     <description>Type Of Transpose For Writes\n
Define the transpose configuration of the data written to the CRC data register. See the description of the
transpose feature for the available transpose options</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b00</name>
                           <description>No Transposition</description>
                           <value>0b00</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01</name>
                           <description>Bits in bytes are transposed, bytes are not transposed</description>
                           <value>0b01</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10</name>
                           <description>Both bits in bytes and bytes are transposed</description>
                           <value>0b10</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11</name>
                           <description>Only bytes are transposed; no bits in a byte are transposed</description>
                           <value>0b11</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
