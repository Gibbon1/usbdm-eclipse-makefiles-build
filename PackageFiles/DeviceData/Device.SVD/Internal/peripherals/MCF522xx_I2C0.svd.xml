<!--
Devices using this peripheral: 
      MCF5223x
      MCF5225x
-->
      <peripheral>
         <?sourceFile "MCF522xx_I2C0" ?>
         <?preferredAccessWidth "32" ?>
         <?forcedBlockWidth "32" ?>
         <name>I2C0</name>
         <description>Inter-Integrated Circuit</description>
         <prependToName>I2C0</prependToName>
         <headerStructName>I2C</headerStructName>
         <baseAddress>0x40000300</baseAddress>
         <size>32</size>
         <access>read-write</access>
         <resetValue>0x0</resetValue>
         <resetMask>0xFFFFFFFF</resetMask>
         <addressBlock>
            <offset>0x0</offset>
            <size>0x14</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>I2ADR</name>
               <description>Address Register\n
Contains the specific slave address to be used by the I2C module.\n
Slave mode is the default I2C mode for an address match on the bus</description>
               <addressOffset>0x0</addressOffset>
               <size>8</size>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>ADR</name>
                     <description>Slave address</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>7</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>I2FDR</name>
               <description>Frequency Divider Register</description>
               <addressOffset>0x4</addressOffset>
               <size>8</size>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>IC</name>
                     <description>I2C clock rate.\n
Prescales the clock for bit-rate selection.\n
The serial bit clock frequency is equal to the internal bus clock divided by the divider factor.\n
Due to potentially slow I2Cn_SCL and I2Cn_SDA rise and fall times, bus signals are sampled at the prescaler frequency</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>6</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>I2CR</name>
               <description>Control Register</description>
               <addressOffset>0x8</addressOffset>
               <size>8</size>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>RSTA</name>
                     <description>Repeat start\n
Attempting a repeat start without bus mastership causes loss of arbitration</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>write-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No effect</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Generate repeated START</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXAK</name>
                     <description>Transmit acknowledge enable\n
Specifies the value driven onto I2Cn_SDA during acknowledge cycles for master and slave receivers.\n
Writing TXAK applies only when the I2C bus is a receiver</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Acknowledge</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>No acknowledge</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>MTX</name>
                     <description>Transmit/receive mode select bit\n
Selects the direction of master and slave transfers</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Receive</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Transmit</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>MSTA</name>
                     <description>Master/slave mode select bit\n
If the master loses arbitration, MSTA is cleared without generating a STOP signal</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Slave mode</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Master mode</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>IIEN</name>
                     <description>Interrupt enable</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Interrupts masked</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Interrupts enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>IEN</name>
                     <description>Module enable\n
Controls the software reset of the entire I2C module.\n
If the module is enabled in the middle of a byte transfer, slave mode ignores the current bus transfer 
and starts operating when the next START condition is detected.\n
Master mode is not aware that the bus is busy; initiating a start cycle may corrupt the current bus cycle, ultimately
causing the current master or the I2C module to lose arbitration, after which bus operation returns to normal</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>I2SR</name>
               <description>Status Register</description>
               <addressOffset>0xC</addressOffset>
               <size>8</size>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>RXAK</name>
                     <description>Received acknowledge.\nThe value of I2Cn_SDA during the acknowledge bit of a bus cycle</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>ACK received</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>NAK received</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>IIF</name>
                     <description>I2C interrupt flag\n
                     Set by:\n
\t- Complete one byte transfer (set at the falling edge of the ninth clock)\n
\t- Reception of a calling address that matches its own specific address in slave-receive mode\n
\t- Arbitration lost\n
Must be cleared by software by writing a 0 in the interrupt routine</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No Interrupt</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Interrupt pending</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>SRW</name>
                     <description>Slave read/write\n
When IAAS is set, SRW indicates the value of the R/W command bit of the calling address sent from the master.\n
SRW is valid only when a complete transfer has occurred, no other transfers have been initiated,
and the I2C module is a slave and has an address match</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Master to slave</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Slave to master</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>IAL</name>
                     <description>I2C arbitration lost\n
Set by hardware in the following circumstances:\n
\t- I2Cn_SDA sampled low when the master drives high during an address or data-transmit cycle.\n
\t- I2Cn_SDA sampled low when the master drives high during the acknowledge bit of a data-receive cycle.\n
\t- A start cycle is attempted when the bus is busy.\n
\t- A repeated start cycle is requested in slave mode.\n
\t- A stop condition is detected when the master did not request it.\n
Cleared by software by writing 0 to it</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Arbitration OK</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Arbitration lost</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>IBB</name>
                     <description>I2C bus busy\n
Indicates the status of the bus</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Bus idle</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Bus busy</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>IAAS</name>
                     <description>I2C addressed as a slave\n
The CPU is interrupted if I2CRn[IIEN] is set\n
Next, the CPU must check SRW and set its TX/RX mode accordingly.\n
Writing to I2CRn clears this bit</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Not addressed</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Addressed as slave</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>ICF</name>
                     <description>I2C Data transferring bit\n
While one byte of data is transferred, ICF is cleared</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Transfer in progress</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Transfer complete</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>I2DR</name>
               <description>Data I/O Register\n
I2C data. When data is written to this register in master transmit mode, a data transfer is initiated.\n
In master receive mode, reading this register initiates the reception of the next byte of data.\n
In slave mode, the same functions are available after an address match has occurred</description>
               <addressOffset>0x10</addressOffset>
               <size>8</size>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>DATA</name>
                     <description>Send or receive data</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
